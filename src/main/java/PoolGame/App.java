/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package PoolGame;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import PoolGame.Items.Pocket;
import PoolGame.Items.PoolTable;
import PoolGame.State.AppState;
import PoolGame.State.EasyAppState;
import PoolGame.State.HardAppState;
import PoolGame.State.NormalAppState;
import javafx.event.EventHandler;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.text.Text;
import org.json.simple.parser.ParseException;

import PoolGame.ConfigReader.ConfigKeyMissingException;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.stage.Stage;
import javafx.util.Duration;

/** The JavaFX application */
public class App extends Application {

    private final double FRAMETIME = 1.0 / 60.0;

    private AppState appState;

    int timetick = 0;

    Text time = new Text();
    Text score = new Text();

    public ConfigReader initAppState(List<String> config) throws InvocationTargetException, NoSuchMethodException, IllegalAccessException {
        if (config.size() > 0) {
            String level = config.get(0);
            if (level.equals("easy")) {
                appState = new EasyAppState(this);
            } else if (level.equals("hard")) {
                appState = new HardAppState(this);
            } else {
                appState = new NormalAppState(this);
            }
        } else {
            appState = new NormalAppState(this);
        }
        return appState.playCurrLevel();
    }

    public void setAppState(AppState appState) {
        this.appState = appState;
    }

    private ConfigReader loadConfig(List<String> args) {
        String configPath;
        boolean isResourcesDir = false;
        if (args.size() > 0) {
            configPath = args.get(0);
        } else {
            configPath = "/config.json";
//            configPath = "/config_hard.json";
            isResourcesDir = true;
        }
        // parse the file:
        ConfigReader config = null;
        try {
            config = new ConfigReader(configPath, isResourcesDir);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            System.err.printf("ERROR: %s\n", e.getMessage());
            System.exit(1);
        } catch (IOException e) {
            e.printStackTrace();
            System.err.printf("ERROR: %s\n", e.getMessage());
            System.exit(1);
        } catch (ParseException e) {
            e.printStackTrace();
            System.err.printf("ERROR: %s\n", e.getMessage());
            System.exit(1);
        } catch (ConfigKeyMissingException e) {
            e.printStackTrace();
            System.err.printf("ERROR: %s\n", e.getMessage());
            System.exit(1);
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
            System.err.printf("ERROR: %s\n", e.getMessage());
            System.exit(1);
        }
        return config;
    }

    void restart(Stage stage, ConfigReader newConfig) {
        startGame(stage, newConfig);
    }

    void startGame(Stage stage, ConfigReader newConfig) {
        timetick = 0;

        Group root = new Group();
        Scene scene = new Scene(root);

        stage.setScene(scene);
        stage.setTitle("PoolGame");
        stage.show();

//        ConfigReader config = loadConfig(getParameters().getRaw());
        ConfigReader config = newConfig;
        Game game = new Game(config);

        Canvas canvas = new Canvas(game.getWindowDimX(), game.getWindowDimY());

        stage.setWidth(game.getWindowDimX());
        stage.setHeight(game.getWindowDimY() +
                Pocket.RADIUS +
                PoolTable.POCKET_OFFSET +
                4); // Magic number to get bottom to align

        root.getChildren().add(canvas);
        // GraphicsContext gc = canvas.getGraphicsContext2D();
        game.addDrawables(root);

        scene.addEventFilter(KeyEvent.KEY_PRESSED, new EventHandler<KeyEvent>() {
            public void handle(KeyEvent ke) {
                if (ke.getCode() == KeyCode.UP) {
                    System.out.println("Key Pressed: " + ke.getCode() + " in startGame");
                    try {
                        System.out.println("hello im " + appState.toString());

                        ConfigReader config = appState.levelUp();

                        ke.consume(); // <-- stops passing the event to next node
                        restart(stage, config);

                        System.out.println("startGame leveling up");
                        System.out.println("hello im " + appState.toString());


                    } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {
                        throw new RuntimeException(e);
                    }
                    ke.consume(); // <-- stops passing the event to next node
                    cleanup(stage,this);
                }
                if (ke.getCode() == KeyCode.DOWN) {
                    System.out.println("Key Pressed: " + ke.getCode() + " in startGame");
                    try {
                        System.out.println("hello im " + appState.toString());

                        System.out.println("startGame leveling down");

                        ConfigReader config = appState.levelDown();

                        ke.consume(); // <-- stops passing the event to next node
                        restart(stage, config);

                        System.out.println("hello im " + appState.toString());


                    } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {
                        throw new RuntimeException(e);
                    }
                    ke.consume(); // <-- stops passing the event to next node
                    cleanup(stage,this);
                }
            }
        });

        game.cheatListener(scene);

        root.getChildren().addAll(time, score);

        Timeline timeline = new Timeline();
        timeline.setCycleCount(Timeline.INDEFINITE);
        KeyFrame frame = new KeyFrame(Duration.seconds(FRAMETIME),
                (actionEvent) -> {
                    game.tick();

                    if (!game.shownWonText) {
                        timetick++;
                        if ((timetick % 120) == 0) {
                            String timer = timetick / 120 + "s";
                            time.setText(timer);
                            time.setX(50);
                            time.setY(50);

                            String stringScore = "Score: " + game.getScore();
                            score.setText(stringScore);
                            score.setX(50);
                            score.setY(70);
                        }
                    }
                });

        timeline.getKeyFrames().add(frame);
        timeline.play();
    }

    private void cleanup(Stage stage, EventHandler eventHandler) {
        stage.removeEventFilter(KeyEvent.KEY_PRESSED, eventHandler);
    }

    @Override
    public void start(Stage stage) throws InvocationTargetException, NoSuchMethodException, IllegalAccessException {
        Group root = new Group();
        Scene scene = new Scene(root);
        
        stage.setScene(scene);
        stage.setTitle("PoolGame");
        stage.show();
        
//        ConfigReader config = loadConfig(getParameters().getRaw());
        ConfigReader config = this.initAppState(getParameters().getRaw());
        Game game = new Game(config);
        
        Canvas canvas = new Canvas(game.getWindowDimX(), game.getWindowDimY());

        stage.setWidth(game.getWindowDimX());
        stage.setHeight(game.getWindowDimY() +
                        Pocket.RADIUS +
                        PoolTable.POCKET_OFFSET +
                        4); // Magic number to get bottom to align

        root.getChildren().add(canvas);
        // GraphicsContext gc = canvas.getGraphicsContext2D();
        game.addDrawables(root);

        scene.addEventFilter(KeyEvent.KEY_PRESSED, new EventHandler<KeyEvent>() {
            public void handle(KeyEvent ke) {
                if (ke.getCode() == KeyCode.UP) {
                    System.out.println("Key Pressed: " + ke.getCode());
                    try {
                        System.out.println("hello im " + appState.toString());
                        ConfigReader config = appState.levelUp();

                        restart(stage, config);
                        System.out.println("start leveling up");

                        System.out.println("hello im " + appState.toString());

                    } catch (Exception e) {
                        throw new RuntimeException(e);
                    }
                    ke.consume();// <-- stops passing the event to next node
                    cleanup(stage,this);
                }
                if (ke.getCode() == KeyCode.DOWN) {
                    System.out.println("Key Pressed: " + ke.getCode());
                    try {
                        System.out.println("hello im " + appState.toString());

                        ConfigReader config = appState.levelDown();
                        restart(stage, config);

                        System.out.println("start leveling down");

                        System.out.println("hello im " + appState.toString());

                    } catch (Exception e) {
                        throw new RuntimeException(e);
                    }
                    ke.consume(); // <-- stops passing the event to next node
                    cleanup(stage,this);
                }
            }
        });

        game.cheatListener(scene);

        root.getChildren().addAll(time, score);


        Timeline timeline = new Timeline();
        timeline.setCycleCount(Timeline.INDEFINITE);
        KeyFrame frame = new KeyFrame(Duration.seconds(FRAMETIME),
        (actionEvent) -> {
                game.tick();

                if (!game.shownWonText) {
                    timetick++;
                    if ((timetick % 60) == 0) {
                        String timer = timetick / 60 + "s";
                        time.setText(timer);
                        time.setX(50);
                        time.setY(50);

                        String stringScore = "Score: " + game.getScore();
                        score.setText(stringScore);
                        score.setX(50);
                        score.setY(70);
                    }
                }
            });

        timeline.getKeyFrames().add(frame);
        timeline.play();
    }

    /**
     * The entry point of the program
     * @param args CLI arguments
     */
    public static void main(String[] args) {
        launch(args);
    }
}
